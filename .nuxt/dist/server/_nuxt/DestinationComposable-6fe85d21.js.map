{"version":3,"file":"DestinationComposable-6fe85d21.js","sources":["../../../../composables/DestinationComposable.js"],"sourcesContent":["import config from \"../config.js\";\r\nimport axiosConfig from \"../axiosConfig.js\";\r\n\r\nconst router = useRoute;\r\n// Config Variables\r\n//let CrmHost = config.CRM_HOST;\r\nlet CrmWebsite = config.CRM_WEBSITE;\r\nlet CrmTurkiyeID = config.CRM_TURKIYE_ID;\r\nlet CrmAntalyaID = config.CRM_ANTALYA_ID;\r\n//let Neighborhood = config.CRM_FILTER_NEIGHBORHOOD;\r\n\r\n// character  variables\r\nlet BracketLeft = \"%5B\";\r\nlet BracketRight = \"%5D\";\r\n\r\n// get CRM_HOST from env // dev or prod\r\nlet CRMHost;\r\nconst CRMHostRes = HelperComposable().GetCRMHost();\r\nCRMHostRes.then((res) => {\r\n  CRMHost = res;\r\n}).catch((error) => {\r\n  console.error(error);\r\n});\r\n\r\nfunction DestinationComposable() {\r\n  // Get destinations from CRM API according to page number\r\n  const GetDestinations = async (PageNumber) => {\r\n    let RawData = null;\r\n    if (!PageNumber) {\r\n      PageNumber = 0;\r\n    }\r\n    const AxiosResponse = await axiosConfig.get(\r\n      `${CRMHost}/estates?webSite=${CrmWebsite}&pageNumber=${PageNumber}`\r\n    );\r\n    RawData = AxiosResponse.data;\r\n    return RawData;\r\n  };\r\n  // Get destinations from CRM API according to destination ID\r\n  const GetDestinationByID = async (id, dates) => {\r\n    let RawData = null;\r\n    let CheckIn = dates[0];\r\n    let CheckOut = dates[1];\r\n    const AxiosResponse = await axiosConfig.get(\r\n      `${CRMHost}/estates/${id}?webSite=${CrmWebsite}&endDate=${CheckOut}&startDate=${CheckIn}`\r\n    );\r\n\r\n    if (AxiosResponse.message) {\r\n      RawData = AxiosResponse.message;\r\n      return RawData;\r\n    }\r\n    if (AxiosResponse.data) {\r\n      RawData = AxiosResponse.data;\r\n      return RawData;\r\n    } else {\r\n      return AxiosResponse;\r\n    }\r\n  };\r\n  // Get destinations from CRM API according to destination ID as basic\r\n  const GetDestinationByIDAsBasic = async (id) => {\r\n    let RawData = null;\r\n    let AxiosResponse = null;\r\n    AxiosResponse = await axiosConfig.get(\r\n      `${CRMHost}/estates/${id}?webSite=${CrmWebsite}`\r\n    );\r\n\r\n    if (AxiosResponse.message) {\r\n      RawData = AxiosResponse.message;\r\n      return RawData;\r\n    }\r\n    if (AxiosResponse.data) {\r\n      RawData = AxiosResponse.data;\r\n      return RawData;\r\n    } else {\r\n      return AxiosResponse;\r\n    }\r\n  };\r\n  // Get popular destinations from CRM API\r\n  const GetPopularDestinations = async () => {\r\n    let RawData = null;\r\n    const AxiosResponse = await axiosConfig.get(\r\n      `${CRMHost}/estates?webSite=${CrmWebsite}&pageNumber=0&pageSize=20`\r\n    );\r\n    RawData = AxiosResponse.data;\r\n    return RawData;\r\n  };\r\n  // Get similar destinations from CRM API\r\n  const GetSimilarDestinations = async () => {\r\n    let RawData = null;\r\n    const AxiosResponse = await axiosConfig.get(\r\n      `${CRMHost}/estates?webSite=${CrmWebsite}`\r\n    );\r\n    RawData = AxiosResponse.data;\r\n    return RawData;\r\n  };\r\n  // get filtered destinations if it has city\r\n  const GetDestinationsByCity = async (city) => {\r\n    let RawData = null;\r\n    let CityID = 2169;\r\n    if (city) {\r\n      CityID = city;\r\n    }\r\n    const AxiosResponse = await axiosConfig.get(\r\n      `${CRMHost}/estates?webSite=${CrmWebsite}&city=${CityID}`\r\n    );\r\n    RawData = AxiosResponse.data;\r\n    return RawData;\r\n  };\r\n  // get cities\r\n  const GetCities = async (id) => {\r\n    let CountryID = CrmTurkiyeID;\r\n    if (id) {\r\n      CountryID = id;\r\n    }\r\n    let RawData = null;\r\n    const AxiosResponse = await axiosConfig.get(\r\n      `${CRMHost}/in-estate/cities/${CountryID}`\r\n    );\r\n    RawData = AxiosResponse.data;\r\n    return RawData;\r\n  };\r\n  // get filtered destinations if it has city\r\n  const GetSubCitiesByCity = async (city) => {\r\n    let RawData = null;\r\n    let CityID = CrmAntalyaID;\r\n    if (city) {\r\n      CityID = city;\r\n    }\r\n    const AxiosResponse = await axiosConfig.get(\r\n      `${CRMHost}/in-estate/subCities/${CityID}`\r\n    );\r\n    RawData = AxiosResponse.data;\r\n    return RawData;\r\n  };\r\n  // get filtered destinations if it has filter cookie value\r\n  const GetFilteredDestinations = async (CookieFilters) => {\r\n    if (!CookieFilters) {\r\n      router.push(\"/error\");\r\n    }\r\n    let CheckIn = CookieFilters.Dates[0];\r\n    let CheckOut = CookieFilters.Dates[1];\r\n    let RawData = null;\r\n    if (!CheckIn) {\r\n      return \"please select check-in date\";\r\n    }\r\n    if (!CheckOut) {\r\n      return \"please select check-out date\";\r\n    }\r\n    let CurrentPage = CookieFilters.CurrentPage;\r\n    if (!CurrentPage) {\r\n      CurrentPage = 0;\r\n    }\r\n    //city\r\n    let CityID = CookieFilters.City.id;\r\n    if (!CityID) {\r\n      CityID = CrmAntalyaID;\r\n    }\r\n    // subcities\r\n    let SubCitiesPatters;\r\n    if (CookieFilters.SubCities) {\r\n      if (CookieFilters.SubCities.ItemID) {\r\n        if (CookieFilters.SubCities.ItemID.length > 0) {\r\n          let CookieSubCities = CookieFilters.SubCities.ItemID;\r\n          // static conditions\r\n          let StaticAntalyaSubCities = [];\r\n          if (\r\n            CookieSubCities.includes(\"1\") ||\r\n            CookieSubCities.includes(\"3\") ||\r\n            CookieSubCities.includes(\"4\")\r\n          ) {\r\n            StaticAntalyaSubCities.push(\"108441\");\r\n          }\r\n          if (CookieSubCities.includes(\"2\")) {\r\n            StaticAntalyaSubCities.push(\"107095\");\r\n          }\r\n          if (CookieSubCities.includes(\"5\")) {\r\n            StaticAntalyaSubCities.push(\"107981\");\r\n          }\r\n          if (CookieSubCities.includes(\"6\")) {\r\n            StaticAntalyaSubCities.push(\"108017\");\r\n          }\r\n          if (CookieSubCities.includes(\"7\")) {\r\n            StaticAntalyaSubCities.push(\"108224\");\r\n          }\r\n          CookieSubCities = StaticAntalyaSubCities;\r\n          // static end\r\n          SubCitiesPatters = CookieSubCities.map(\r\n            (sub, index) =>\r\n              `&subCitys${BracketLeft}${index}${BracketRight}=${sub}`\r\n          ).join(\"&\");\r\n        } else {\r\n          SubCitiesPatters = ``;\r\n        }\r\n      } else {\r\n        SubCitiesPatters = ``;\r\n      }\r\n    }\r\n    // sub accordion items for more filter\r\n    let SubFilterPatters;\r\n    if (CookieFilters.DTO) {\r\n      if (CookieFilters.DTO.ItemID) {\r\n        if (CookieFilters.DTO.ItemID.length > 0) {\r\n          let CookieSubFilters = CookieFilters.DTO.ItemID;\r\n          SubFilterPatters = CookieSubFilters.map((sub, index) => {\r\n            const cleanedSub = sub.replace(\"p-\", \"\"); // 'p-' delete\r\n            return `&propertyDetail${BracketLeft}${index}${BracketRight}=${cleanedSub}`;\r\n          }).join(\"&\");\r\n        } else {\r\n          SubFilterPatters = ``;\r\n        }\r\n      } else {\r\n        SubFilterPatters = ``;\r\n      }\r\n    }\r\n    // try to send request to api\r\n    const AxiosResponse = await axiosConfig.get(\r\n      `${CRMHost}/estates?webSite=${CrmWebsite}&city=${CityID}&endDate=${CheckOut}&startDate=${CheckIn}${SubCitiesPatters}${SubFilterPatters}&pageNumber=${CurrentPage}`\r\n    );\r\n    RawData = AxiosResponse.data;\r\n    return RawData;\r\n  };\r\n  // get properties and rooms\r\n  const GetPropertiesAndRooms = async () => {\r\n    let RawData = null;\r\n    const AccessToken = localStorage.getItem(\"AccessToken\");\r\n    if (!AccessToken) {\r\n      return \"Please login again\";\r\n    }\r\n    const AxiosResponse = await axiosConfig.get(\r\n      `${CRMHost}/properties-and-room`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${AccessToken}`,\r\n        },\r\n      }\r\n    );\r\n    if (AxiosResponse) {\r\n      if (AxiosResponse.data) {\r\n        RawData = AxiosResponse.data;\r\n        return RawData;\r\n      }\r\n    } else {\r\n      return AxiosResponse;\r\n    }\r\n  };\r\n  return {\r\n    GetDestinations,\r\n    GetDestinationByID,\r\n    GetPopularDestinations,\r\n    GetSimilarDestinations,\r\n    GetDestinationsByCity,\r\n    GetCities,\r\n    GetSubCitiesByCity,\r\n    GetFilteredDestinations,\r\n    GetPropertiesAndRooms,\r\n    GetDestinationByIDAsBasic,\r\n  };\r\n}\r\nexport default DestinationComposable;\r\n"],"names":[],"mappings":";;;;;;;AAiBA,MAAM,aAAa,mBAAmB;AACtC,WAAW,KAAK,CAAC,QAAQ;AAEzB,CAAC,EAAE,MAAM,CAAC,UAAU;AAClB,UAAQ,MAAM,KAAK;AACrB,CAAC;"}